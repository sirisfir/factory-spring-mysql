package {{ group }}.{{ artifact }}.security;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.core.userdetails.UserDetailsService;

@EnableWebSecurity 	// Enable security config. This annotation denotes config for spring security.
public class JWTSecurityConfig extends WebSecurityConfigurerAdapter {

    private final String secret;
    private final int expiration;
	private final UserDetailsService userDetailsService;

    @Autowired
    public JWTSecurityConfig (
			@Value("${jwt.secret}") final String secret, 
			@Value("${jwt.expiration:3600}") final int expiration,
			UserDetailsService userDetailsService
	){
        this.secret = secret;
        this.expiration = expiration;
		this.userDetailsService = userDetailsService;
    }

	@Override
  	protected void configure(HttpSecurity http) throws Exception {
    	   http
		.csrf().disable()
		    // make sure we use stateless session; session won't be used to store user's state.
	 	    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) 	
		.and()
		    // handle an authorized attempts 
		    .exceptionHandling().authenticationEntryPoint((req, rsp, e) -> rsp.sendError(HttpServletResponse.SC_UNAUTHORIZED)) 	
		.and()
		   // Add a filter to validate the tokens with every request
		   .addFilterAfter(new JWTTokenAuthenticationFilter(this.secret,this.expiration), UsernamePasswordAuthenticationFilter.class)
		   .addFilter(new JWTUsernameAndPasswordAuthenticationFilter(this.secret,this.expiration,authenticationManager()))
		// authorization requests config
		.authorizeRequests()
		   // allow all who are accessing "auth" service
		   .antMatchers(HttpMethod.POST, "/auth/**").permitAll()  
		   // must be an admin if trying to access admin area (authentication is also required here)
		   .antMatchers("/admin/**").hasRole("ADMIN")
		   // Any other request must be authenticated
		   .anyRequest().authenticated(); 
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(this.userDetailsService).passwordEncoder(passwordEncoder());
	}

    @Bean
	public BCryptPasswordEncoder passwordEncoder() {
	    return new BCryptPasswordEncoder();
	}
}