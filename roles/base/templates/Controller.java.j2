package {{ group }}.{{ artifact }}.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Optional;

import {{ group }}.{{ artifact }}.domain.{{ entity.name }};
import {{ group }}.{{ artifact }}.repository.{{ entity.name }}Repository;

@RestController
@RequestMapping("/{{entity.name|lower}}")
public class {{ entity.name }}Controller {

    private final {{ entity.name }}Repository {{entity.name|lower}}Repository;

    @Autowired
    public {{ entity.name }}Controller(final {{ entity.name }}Repository {{entity.name|lower}}Repository){
        this.{{entity.name|lower}}Repository = {{entity.name|lower}}Repository;
    }

    @GetMapping
    public Page<{{ entity.name }}> get{{ entity.name }}List (final Pageable pageSpecification) {
        return this.{{ entity.name|lower }}Repository.findAll(pageSpecification);
    }

    @GetMapping("/{id}")
    public ResponseEntity<{{ entity.name }}> get{{ entity.name }}ById(@PathVariable("id") final Long id){
        return this.{{ entity.name|lower }}Repository
                .findById(id)
                .map({{ entity.name|lower }}->ResponseEntity.ok({{ entity.name|lower }}))
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public {{ entity.name }} new{{ entity.name }} (@RequestBody final {{ entity.name }} {{ entity.name|lower}}) {
        return this.{{ entity.name|lower }}Repository.saveAndFlush({{ entity.name|lower}});
    }

    @DeleteMapping("/{id}")
    public void delete{{ entity.name }} (@PathVariable("id") final Long id) {
       this.{{ entity.name|lower }}Repository.deleteById(id);
    }

}